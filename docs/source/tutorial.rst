Tutorial
============

Constructing KML from scratch
-----------------------------

The pyKML library can be used to construct KML documents, using the 
`pykml.factory` module:

.. ipython::
    
    In [11]: from pykml.factory import KML_ElementMaker as KML
    
    In [12]: pm1 = KML.Placemark(
       ....:         KML.name("Hello World!"),
       ....:         KML.Point(
       ....:           KML.coordinates("-64.5253,18.4607")
       ....:         )
       ....:       )

Once a pyKML object element has been created, a string representation can be 
generated by using the `.tostring()` method:

.. ipython::
    
    In [13]: from lxml import etree
    
    @doctest
    In [14]: etree.tostring(pm1)
    Out[14]: '<Placemark xmlns:gx="http://www.google.com/kml/ext/2.2" xmlns:atom="http://www.w3.org/2005/Atom" xmlns="http://www.opengis.net/kml/2.2"><name>Hello World!</name><Point><coordinates>-64.5253,18.4607</coordinates></Point></Placemark>'

    # use the pretty_print option if you want to examine the levels
    In [15]: print etree.tostring(pm1, pretty_print=True)

pyKML objects can be passed around as objects and later aggregated:

.. ipython::
    
    In [32]: pm2 = KML.Placemark(
       ....:         KML.name("A second placemark!"),
       ....:         KML.Point(
       ....:           KML.coordinates("-64.5358,18.4486")
       ....:         )
       ....:       )
    
    In [33]: fld = KML.Folder(pm1,pm2)
    
    In [34]: print etree.tostring(fld, pretty_print=True)


Parsing existing KML documents
------------------------------

.. note::

    Todo...

