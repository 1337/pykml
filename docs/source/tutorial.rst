pyKML Tutorial
==============

Constructing KML from scratch
-----------------------------

The pyKML library can be used to construct KML documents, using the 
`pykml.factory` module:

.. ipython::
    
    In [11]: from pykml.factory import KML_ElementMaker as KML
    
    In [12]: name_object = KML.name("Hello World!")

Documents with nested KML tags can be created by nesting the creation
of Python objects:

.. ipython::
    
    In [16]: pm1 = KML.Placemark(
       ....:         KML.name("Hello World!"),
       ....:         KML.Point(
       ....:           KML.coordinates("-64.5253,18.4607")
       ....:         )
       ....:       )

Once a pyKML object element has been created, a string representation can be 
generated by using the `.tostring()` method:

.. ipython::
    
    In [21]: from lxml import etree
    
    @doctest
    In [22]: etree.tostring(pm1)
    Out[22]: '<Placemark xmlns:gx="http://www.google.com/kml/ext/2.2" xmlns:atom="http://www.w3.org/2005/Atom" xmlns="http://www.opengis.net/kml/2.2"><name>Hello World!</name><Point><coordinates>-64.5253,18.4607</coordinates></Point></Placemark>'

    # use the pretty_print option if you want something more readable
    In [23]: print etree.tostring(pm1, pretty_print=True)

pyKML creates Python objects, which  can be passed around as objects and 
later aggregated.  The following creates a second placemark object, and then 
groups the two placemarks together in a folder.

.. ipython::
    
    In [31]: pm2 = KML.Placemark(
       ....:         KML.name("A second placemark!"),
       ....:         KML.Point(
       ....:           KML.coordinates("-64.5358,18.4486")
       ....:         )
       ....:       )
    
    In [32]: fld = KML.Folder(pm1,pm2)
    
    In [33]: print etree.tostring(fld, pretty_print=True)

Objects representing KML elements can also be appended into objects that have
already been created.
For example, the following appends yet another placemark to the folder.
The following removes the second of three placemarks in a folder:

.. ipython::
    
    In [41]: pm3=KML.Placemark(KML.name("A third placemark!"))
    
    In [42]: fld.append(pm3)
    
    In [43]: print etree.tostring(fld, pretty_print=True)

Similarly, you can remove elements from an existing object:

.. ipython::
    
    In [51]: fld.remove(pm2)
    
    In [52]: print etree.tostring(fld, pretty_print=True)



Parsing existing KML documents
------------------------------

.. note::

    Todo....




